From db9d774777a7ca116a5343dee5bda6d92224b851 Mon Sep 17 00:00:00 2001
From: Stephen Roettger <sroettger@google.com>
Date: Tue, 28 Jun 2022 14:26:57 +0200
Subject: [PATCH 1/3] Allow embedder to choose node name

---
 src/api.cc                 |  2 +-
 src/ipcz/node.cc           |  4 ++--
 src/ipcz/node.h            |  2 +-
 src/ipcz/node_connector.cc | 16 +++++++++++++---
 src/ipcz/node_connector.h  |  2 +-
 5 files changed, 18 insertions(+), 8 deletions(-)

diff --git a/src/api.cc b/src/api.cc
index 05dbc3a..75a15ae 100644
--- a/src/api.cc
+++ b/src/api.cc
@@ -93,7 +93,7 @@ IpczResult ConnectNode(IpczHandle node_handle,
 
   return node->ConnectNode(
       driver_transport, flags,
-      absl::Span<IpczHandle>(initial_portals, num_initial_portals));
+      absl::Span<IpczHandle>(initial_portals, num_initial_portals), options);
 }
 
 IpczResult OpenPortals(IpczHandle node_handle,
diff --git a/src/ipcz/node.cc b/src/ipcz/node.cc
index 9fbe904..2f08d1b 100644
--- a/src/ipcz/node.cc
+++ b/src/ipcz/node.cc
@@ -64,7 +64,7 @@ void Node::ShutDown() {
 
 IpczResult Node::ConnectNode(IpczDriverHandle driver_transport,
                              IpczConnectNodeFlags flags,
-                             absl::Span<IpczHandle> initial_portals) {
+                             absl::Span<IpczHandle> initial_portals, const void* options) {
   std::vector<Ref<Portal>> portals(initial_portals.size());
   for (size_t i = 0; i < initial_portals.size(); ++i) {
     auto portal =
@@ -76,7 +76,7 @@ IpczResult Node::ConnectNode(IpczDriverHandle driver_transport,
   auto transport = MakeRefCounted<DriverTransport>(
       DriverObject(WrapRefCounted(this), driver_transport));
   IpczResult result = NodeConnector::ConnectNode(WrapRefCounted(this),
-                                                 transport, flags, portals);
+                                                 transport, flags, portals, options);
   if (result != IPCZ_RESULT_OK) {
     transport->Release();
     for (Ref<Portal>& portal : portals) {
diff --git a/src/ipcz/node.h b/src/ipcz/node.h
index c3d8c8d..2aae35c 100644
--- a/src/ipcz/node.h
+++ b/src/ipcz/node.h
@@ -65,7 +65,7 @@ class Node : public APIObjectImpl<Node, APIObject::kNode> {
   // link is established successfully.
   IpczResult ConnectNode(IpczDriverHandle driver_transport,
                          IpczConnectNodeFlags flags,
-                         absl::Span<IpczHandle> initial_portals);
+                         absl::Span<IpczHandle> initial_portals, const void* options);
 
   void SetPortalsWaitingForLink(const NodeName& node_name,
                                 absl::Span<const Ref<Portal>> portals);
diff --git a/src/ipcz/node_connector.cc b/src/ipcz/node_connector.cc
index c09cd2b..05bc29b 100644
--- a/src/ipcz/node_connector.cc
+++ b/src/ipcz/node_connector.cc
@@ -26,6 +26,7 @@ namespace {
 class NodeConnectorForBrokerToNonBroker : public NodeConnector {
  public:
   NodeConnectorForBrokerToNonBroker(Ref<Node> node,
+                                    NodeName new_remote_node_name,
                                     Ref<DriverTransport> transport,
                                     IpczConnectNodeFlags flags,
                                     std::vector<Ref<Portal>> waiting_portals,
@@ -35,6 +36,7 @@ class NodeConnectorForBrokerToNonBroker : public NodeConnector {
                       flags,
                       std::move(waiting_portals),
                       std::move(callback)),
+        new_remote_node_name_(new_remote_node_name),
         link_memory_(NodeLinkMemory::Allocate(node_,
                                               num_portals(),
                                               link_memory_to_share_)) {}
@@ -85,7 +87,7 @@ class NodeConnectorForBrokerToNonBroker : public NodeConnector {
 
  private:
   const NodeName broker_name_{node_->GetAssignedName()};
-  const NodeName new_remote_node_name_{node_->GenerateRandomName()};
+  const NodeName new_remote_node_name_;
   DriverMemory link_memory_to_share_;
   Ref<NodeLinkMemory> link_memory_;
 };
@@ -390,6 +392,7 @@ std::pair<Ref<NodeConnector>, IpczResult> CreateConnector(
     Ref<DriverTransport> transport,
     IpczCreateNodeFlags flags,
     const std::vector<Ref<Portal>>& initial_portals,
+    const void* options,
     NodeConnector::ConnectCallback callback) {
   const bool from_broker = node->type() == Node::Type::kBroker;
   const bool to_broker = (flags & IPCZ_CONNECT_NODE_TO_BROKER) != 0;
@@ -402,8 +405,14 @@ std::pair<Ref<NodeConnector>, IpczResult> CreateConnector(
               IPCZ_RESULT_OK};
     }
 
+    NodeName new_remote_node_name = node->GenerateRandomName();
+    if (options) {
+      uint64_t *raw_node_name = (uint64_t *) options;
+      new_remote_node_name = NodeName(raw_node_name[0], raw_node_name[1]);
+    }
+
     return {MakeRefCounted<NodeConnectorForBrokerToNonBroker>(
-                std::move(node), std::move(transport), flags, initial_portals,
+                std::move(node), new_remote_node_name, std::move(transport), flags, initial_portals,
                 std::move(callback)),
             IPCZ_RESULT_OK};
   }
@@ -433,6 +442,7 @@ IpczResult NodeConnector::ConnectNode(
     Ref<DriverTransport> transport,
     IpczCreateNodeFlags flags,
     const std::vector<Ref<Portal>>& initial_portals,
+    const void* options,
     ConnectCallback callback) {
   const bool from_broker = node->type() == Node::Type::kBroker;
   const bool to_broker = (flags & IPCZ_CONNECT_NODE_TO_BROKER) != 0;
@@ -492,7 +502,7 @@ IpczResult NodeConnector::ConnectNode(
 
   auto [connector, result] =
       CreateConnector(std::move(node), std::move(transport), flags,
-                      initial_portals, std::move(callback));
+                      initial_portals, options, std::move(callback));
   if (result != IPCZ_RESULT_OK) {
     return result;
   }
diff --git a/src/ipcz/node_connector.h b/src/ipcz/node_connector.h
index 86cba04..2525553 100644
--- a/src/ipcz/node_connector.h
+++ b/src/ipcz/node_connector.h
@@ -45,7 +45,7 @@ class NodeConnector : public RefCounted, public DriverTransport::Listener {
   static IpczResult ConnectNode(Ref<Node> node,
                                 Ref<DriverTransport> transport,
                                 IpczCreateNodeFlags flags,
-                                const std::vector<Ref<Portal>>& initial_portals,
+                                const std::vector<Ref<Portal>>& initial_portals, const void* options,
                                 ConnectCallback callback = nullptr);
 
   // Constructs a new NodeConnector to send and receive a handshake on
-- 
2.37.0.rc0.161.g10f37bed90-goog

