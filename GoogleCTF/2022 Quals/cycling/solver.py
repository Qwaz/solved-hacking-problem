from functools import reduce
import operator
from Crypto.Util.number import isPrime, inverse, long_to_bytes


e = 65537
n = 0x99EFA9177387907EB3F74DC09A4D7A93ABF6CEB7EE102C689ECD0998975CEDE29F3CA951FEB5ADFB9282879CC666E22DCAFC07D7F89D762B9AD5532042C79060CDB022703D790421A7F6A76A50CCEB635AD1B5D78510ADF8C6FF9645A1B179E965358E10FE3DD5F82744773360270B6FA62D972D196A810E152F1285E0B8B26F5D54991D0539A13E655D752BD71963F822AFFC7A03E946CEA2C4EF65BF94706F20B79D672E64E8FAAC45172C4130BFECA9BEF71ED8C0C9E2AA0A1D6D47239960F90EF25B337255BAC9C452CB019A44115B0437726A9ADEF10A028F1E1263C97C14A1D7CD58A8994832E764FFBFCC05EC8ED3269BB0569278EEA0550548B552B1
ct = 0x339BE515121DAB503106CD190897382149E032A76A1CA0EEC74F2C8C74560B00DFFC0AD65EE4DF4F47B2C9810D93E8579517692268C821C6724946438A9744A2A95510D529F0E0195A2660ABD057D3F6A59DF3A1C9A116F76D53900E2A715DFE5525228E832C02FD07B8DAC0D488CCA269E0DBB74047CF7A5E64A06A443F7D580EE28C5D41D5EDE3604825EBA31985E96575DF2BCC2FEFD0C77F2033C04008BE9746A0935338434C16D5A68D1338EABDCF0170AC19A27EC832BF0A353934570ABD48B1FE31BC9A4BB99428D1FBAB726B284AEC27522EFB9527DDCE1106BA6A480C65F9332C5B2A3C727A2CCA6D6951B09C7C28ED0474FDC6A945076524877680

period = 2**1025 - 2
factors = [
    2,
    3,
    5,
    17,
    257,
    641,
    65537,
    274177,
    2424833,
    6700417,
    67280421310721,
    1238926361552897,
    59649589127497217,
    5704689200685129054721,
    7455602825647884208337395736200454918783366342657,
    93461639715357977769163558199606896584051237541638188580280321,
    741640062627530801524787141901937474059940781097519023905821316144415759504705008092818711693940737,
]

assert period == reduce(operator.mul, factors, 1)

primes = []

for x in range(1 << len(factors)):
    acc = 1
    for (i, p) in enumerate(factors):
        if (x >> i) & 1:
            acc *= p
    if isPrime(acc + 1):
        primes.append(acc + 1)

monster = reduce(operator.mul, primes, 1)
d = inverse(e, monster)

# CTF{Recycling_Is_Great}
print(long_to_bytes(pow(ct, d, n)))
