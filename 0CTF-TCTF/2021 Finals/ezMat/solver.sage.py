

# This file was *autogenerated* from the file solver.sage
from sage.all_cmdline import *   # import sage library

_sage_const_71 = Integer(71); _sage_const_31 = Integer(31); _sage_const_45 = Integer(45); _sage_const_41 = Integer(41); _sage_const_12 = Integer(12); _sage_const_36 = Integer(36); _sage_const_43 = Integer(43); _sage_const_51 = Integer(51); _sage_const_25 = Integer(25); _sage_const_2 = Integer(2); _sage_const_64 = Integer(64); _sage_const_68 = Integer(68); _sage_const_24 = Integer(24); _sage_const_32 = Integer(32); _sage_const_35 = Integer(35); _sage_const_52 = Integer(52); _sage_const_13 = Integer(13); _sage_const_10 = Integer(10); _sage_const_14 = Integer(14); _sage_const_40 = Integer(40); _sage_const_34 = Integer(34); _sage_const_67 = Integer(67); _sage_const_21 = Integer(21); _sage_const_57 = Integer(57); _sage_const_6 = Integer(6); _sage_const_56 = Integer(56); _sage_const_7 = Integer(7); _sage_const_17 = Integer(17); _sage_const_33 = Integer(33); _sage_const_54 = Integer(54); _sage_const_66 = Integer(66); _sage_const_28 = Integer(28); _sage_const_23 = Integer(23); _sage_const_26 = Integer(26); _sage_const_65 = Integer(65); _sage_const_70 = Integer(70); _sage_const_55 = Integer(55); _sage_const_47 = Integer(47); _sage_const_42 = Integer(42); _sage_const_0 = Integer(0); _sage_const_59 = Integer(59); _sage_const_29 = Integer(29); _sage_const_46 = Integer(46); _sage_const_60 = Integer(60); _sage_const_44 = Integer(44); _sage_const_49 = Integer(49); _sage_const_1 = Integer(1); _sage_const_20 = Integer(20); _sage_const_30 = Integer(30); _sage_const_16 = Integer(16); _sage_const_53 = Integer(53); _sage_const_3 = Integer(3); _sage_const_39 = Integer(39); _sage_const_15 = Integer(15); _sage_const_8 = Integer(8); _sage_const_9 = Integer(9); _sage_const_5 = Integer(5); _sage_const_38 = Integer(38); _sage_const_37 = Integer(37); _sage_const_61 = Integer(61); _sage_const_4 = Integer(4); _sage_const_58 = Integer(58); _sage_const_69 = Integer(69); _sage_const_22 = Integer(22); _sage_const_63 = Integer(63); _sage_const_50 = Integer(50); _sage_const_27 = Integer(27); _sage_const_11 = Integer(11); _sage_const_48 = Integer(48); _sage_const_18 = Integer(18); _sage_const_62 = Integer(62); _sage_const_19 = Integer(19)
import itertools
from hashlib import sha256

p = _sage_const_71 

alphabet = '=0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$!?_{}<>'

E = matrix(GF(p), [
    [_sage_const_31 , _sage_const_45 , _sage_const_41 , _sage_const_12 , _sage_const_36 , _sage_const_43 , _sage_const_45 , _sage_const_51 , _sage_const_25 ,  _sage_const_2 , _sage_const_64 ],
    [_sage_const_68 , _sage_const_24 , _sage_const_32 , _sage_const_35 , _sage_const_52 , _sage_const_13 , _sage_const_64 , _sage_const_10 , _sage_const_14 ,  _sage_const_2 , _sage_const_40 ],
    [_sage_const_34 , _sage_const_34 , _sage_const_64 , _sage_const_32 , _sage_const_67 , _sage_const_25 , _sage_const_21 , _sage_const_57 , _sage_const_31 ,  _sage_const_6 , _sage_const_56 ],
    [ _sage_const_7 , _sage_const_17 , _sage_const_12 , _sage_const_33 , _sage_const_54 , _sage_const_66 , _sage_const_28 , _sage_const_25 , _sage_const_40 , _sage_const_23 , _sage_const_26 ],
    [_sage_const_14 , _sage_const_65 , _sage_const_70 , _sage_const_35 , _sage_const_67 , _sage_const_55 , _sage_const_47 , _sage_const_36 , _sage_const_36 , _sage_const_42 , _sage_const_57 ],
    [_sage_const_68 , _sage_const_28 , _sage_const_33 ,  _sage_const_0 , _sage_const_45 , _sage_const_52 , _sage_const_59 , _sage_const_29 , _sage_const_52 , _sage_const_41 , _sage_const_46 ],
    [_sage_const_60 , _sage_const_35 ,  _sage_const_0 , _sage_const_21 , _sage_const_24 , _sage_const_44 , _sage_const_49 , _sage_const_51 ,  _sage_const_1 ,  _sage_const_6 , _sage_const_35 ],
    [_sage_const_20 , _sage_const_21 , _sage_const_44 , _sage_const_57 , _sage_const_23 , _sage_const_35 , _sage_const_30 , _sage_const_28 , _sage_const_16 , _sage_const_23 ,  _sage_const_0 ],
    [_sage_const_24 , _sage_const_64 , _sage_const_54 , _sage_const_53 , _sage_const_35 , _sage_const_42 , _sage_const_40 , _sage_const_17 ,  _sage_const_3 ,  _sage_const_0 , _sage_const_36 ],
    [_sage_const_32 , _sage_const_53 , _sage_const_39 , _sage_const_47 , _sage_const_39 , _sage_const_56 , _sage_const_52 , _sage_const_15 , _sage_const_39 ,  _sage_const_8 ,  _sage_const_9 ],
    [ _sage_const_7 , _sage_const_57 , _sage_const_43 ,  _sage_const_5 , _sage_const_38 , _sage_const_59 ,  _sage_const_2 , _sage_const_25 ,  _sage_const_2 , _sage_const_67 , _sage_const_12 ],
])

pk = matrix(GF(p), [
    [_sage_const_53 , _sage_const_28 , _sage_const_20 , _sage_const_41 , _sage_const_32 , _sage_const_17 , _sage_const_13 , _sage_const_46 , _sage_const_34 , _sage_const_37 , _sage_const_24 ],
    [ _sage_const_0 ,  _sage_const_9 , _sage_const_54 , _sage_const_25 , _sage_const_36 ,  _sage_const_1 , _sage_const_21 , _sage_const_24 , _sage_const_56 , _sage_const_51 , _sage_const_24 ],
    [_sage_const_61 , _sage_const_41 , _sage_const_10 , _sage_const_56 , _sage_const_57 , _sage_const_28 , _sage_const_49 ,  _sage_const_4 , _sage_const_44 , _sage_const_70 , _sage_const_34 ],
    [_sage_const_47 , _sage_const_58 , _sage_const_36 , _sage_const_53 , _sage_const_68 , _sage_const_66 , _sage_const_34 , _sage_const_69 , _sage_const_22 , _sage_const_25 , _sage_const_39 ],
    [ _sage_const_4 , _sage_const_70 , _sage_const_21 , _sage_const_36 , _sage_const_53 , _sage_const_26 , _sage_const_59 , _sage_const_51 ,  _sage_const_3 , _sage_const_44 , _sage_const_28 ],
    [_sage_const_41 , _sage_const_23 , _sage_const_39 , _sage_const_37 ,  _sage_const_1 , _sage_const_28 , _sage_const_63 , _sage_const_64 , _sage_const_37 , _sage_const_35 , _sage_const_51 ],
    [_sage_const_43 , _sage_const_31 , _sage_const_16 , _sage_const_36 , _sage_const_45 ,  _sage_const_5 , _sage_const_35 , _sage_const_52 ,  _sage_const_7 , _sage_const_45 , _sage_const_41 ],
    [_sage_const_26 ,  _sage_const_3 , _sage_const_54 , _sage_const_58 , _sage_const_50 , _sage_const_37 , _sage_const_27 , _sage_const_49 ,  _sage_const_3 , _sage_const_46 , _sage_const_11 ],
    [_sage_const_14 , _sage_const_48 , _sage_const_18 , _sage_const_46 , _sage_const_59 , _sage_const_64 , _sage_const_62 , _sage_const_31 , _sage_const_42 , _sage_const_41 , _sage_const_65 ],
    [_sage_const_17 , _sage_const_50 , _sage_const_68 , _sage_const_10 , _sage_const_24 , _sage_const_40 , _sage_const_58 , _sage_const_46 , _sage_const_48 , _sage_const_14 , _sage_const_58 ],
    [_sage_const_46 , _sage_const_24 , _sage_const_48 , _sage_const_32 , _sage_const_16 ,  _sage_const_1 , _sage_const_27 , _sage_const_18 , _sage_const_27 , _sage_const_17 , _sage_const_20 ],
])


flag_mark = zero_matrix(GF(p), _sage_const_11 , _sage_const_11 )
for k in range(_sage_const_24 ):
    i, j = _sage_const_5 *k // _sage_const_11 , _sage_const_5 *k % _sage_const_11 
    flag_mark[i, j] = _sage_const_1 

U_inv = zero_matrix(GF(p), _sage_const_11 , _sage_const_11 )

for row in range(_sage_const_10 , _sage_const_1 , -_sage_const_1 ):
    ans_size = _sage_const_11  - row

    count = _sage_const_0 
    for col in range(_sage_const_11 ):
        if flag_mark[row, col] == _sage_const_1 :
            continue
        count += _sage_const_1 

    left = zero_matrix(GF(p), ans_size, count)
    right = zero_vector(GF(p), count)

    count = _sage_const_0 
    for col in range(_sage_const_11 ):
        if flag_mark[row, col] == _sage_const_1 :
            continue
        right[count] = pk[row, col]
        for y in range(ans_size):
            left[y, count] = E[_sage_const_11  - ans_size + y, col]
        count += _sage_const_1 

    print(f"Row: {row}")
    print(f"Left:\n{left}")
    print(f"Right:\n{right}")

    ans = left.solve_left(right)
    print(f"Ans: {ans}")

    for col in range(ans_size):
        U_inv[row, _sage_const_11  - ans_size + col] = ans[col]

print(U_inv)

flag_mat = U_inv * E - pk
print(flag_mat)

suffix = ""
for k in range(_sage_const_5 , _sage_const_24 ):
    i, j = _sage_const_5 *k // _sage_const_11 , _sage_const_5 *k % _sage_const_11 
    suffix += alphabet[flag_mat[i, j]]

assert len(suffix) == _sage_const_19 
print(suffix)


# First three bytes free
# Next two bytes has 71 possibilities
possibilities = []

# Brute-force
flag_mark[_sage_const_1 , _sage_const_4 ] = _sage_const_0 

for first_char in range(p):
    row = _sage_const_1 
    ans_size = _sage_const_10 

    count = _sage_const_0 
    for col in range(_sage_const_11 ):
        if flag_mark[row, col] == _sage_const_1 :
            continue
        count += _sage_const_1 

    left = zero_matrix(GF(p), ans_size, count)
    right = zero_vector(GF(p), count)

    count = _sage_const_0 
    for col in range(_sage_const_11 ):
        if flag_mark[row, col] == _sage_const_1 :
            continue
        right[count] = pk[row, col]
        if col == _sage_const_4 :
            # Guess this location
            right[count] += first_char
        for y in range(ans_size):
            left[y, count] = E[_sage_const_11  - ans_size + y, col]
        count += _sage_const_1 

    print(f"Row: {row}")
    print(f"Left:\n{left}")
    print(f"Right:\n{right}")

    ans = left.solve_left(right)
    print(f"Ans: {ans}")

    for col in range(ans_size):
        U_inv[row, _sage_const_11  - ans_size + col] = ans[col]

    flag_mat = U_inv * E - pk
    possibilities.append(alphabet[flag_mat[_sage_const_1 , _sage_const_4 ]] + alphabet[flag_mat[_sage_const_1 , _sage_const_9 ]])

print(possibilities)

for prefix in itertools.product(alphabet, repeat=_sage_const_3 ):
    for mid in possibilities:
        s = prefix[_sage_const_0 ] + prefix[_sage_const_1 ] + prefix[_sage_const_2 ] + mid + suffix
        if sha256(s.encode()).hexdigest() == '95cb911a467482cc0f879861532e9ec7680b0846b48a9de25fb13b01c583d9f8':
            print("flag{" + s + "}")
            exit()

